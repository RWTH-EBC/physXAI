name: Pytest Coverage

on:
  pull_request:
    branches:
    - main # Runs on PRs targeting the main branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run_pytest_coverage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.event_name == 'pull_request' && github.head_ref || 'main' }}
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install requirements and add python path
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        
    - name: Create reports directory
      run: |
        mkdir -p build/reports
    
    - name: Run pytest with coverage
      run: |
        pytest --cov --cov-report=html --cov-report=xml --cov-report=term
    
    - name: Generate coverage badge
      if: matrix.python-version == '3.12'
      run: |
        coverage-badge -o build/reports/coverage.svg -f
        
    - name: Check if badge changed or is new
      if: matrix.python-version == '3.12'
      id: badge-check
      run: |
        # Check if the file exists in git (tracked)
        if git ls-files --error-unmatch build/reports/coverage.svg 2>/dev/null; then
          # File exists in git, check if it changed
          if git diff --quiet HEAD -- build/reports/coverage.svg; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Badge exists and unchanged"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Badge exists and changed"
          fi
        else
          # File doesn't exist in git (new file)
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Badge is new file"
        fi
        
    - name: Commit and push coverage badge
      if: matrix.python-version == '3.12' && steps.badge-check.outputs.changed == 'true' && github.event_name == 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add build/reports/coverage.svg
        git commit -m "Update coverage badge [skip ci]"
        git push origin ${{ github.head_ref }}
        
    - name: Upload coverage badge as artifact
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-badge
        path: build/reports/coverage.svg
        retention-days: 30
        
    - name: Upload coverage HTML report
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: build/reports/coverage_html/
        retention-days: 30